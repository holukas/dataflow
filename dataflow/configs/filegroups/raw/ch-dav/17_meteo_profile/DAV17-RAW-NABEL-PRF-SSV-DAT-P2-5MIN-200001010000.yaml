# CH-DAV
# 17_meteo_profile

#   NABEL profile measurements, P2 = profile 2 (with CO2)
#
#   Complete year in one respective file
#
#   These are space-separated values (SSV).
#   Unfortunately there are inconsistencies in the file structure:
#
#     - The first column has the name "NAMEN K.( 8)" and therefore
#     contains whitespace. Therefore, reading the file strictly as
#     SSV will fail because the first column is recognized as three
#     separate columns "NAMEN", "K.(" and "8)".
#
#     - The solution is to read the file w/o the header info and then
#     assign column names using the "names=" parameter in pandas.read_csv().
#
#     - Therefore data_vars are not read from file. Instead, file is
#     read w/o column info, and then the column names defined in data_vars
#     are assigned. For this to work it seems to be necessary to also provide
#     the TIMESTAMP column in data_vars, even though the timestamp column is
#     created during timestamp parsing.
#
#     - Another issue is that when the five CO2 measurements are missing the values
#     written to the file are "-999.9000-999.9000-999.9000-999.9000-999.9000",
#     w/o space-separation. Thus, reading the file strictly as SSV will recognize
#     these missing values as ONE string for the first data column and the
#     respective data column is then recognized as dtype 'string' and not numeric.
#     The columns after the five CO2 are assigned wrong or missing values in this case,
#     basically shifting the columns (e.g., the temperature record "TEMPMK3" might still
#     exist as valid value but is stored as record for the second CO2 measurement "CO2ABS10").
#     This can be solved by removing lines containing this string using the setting 
#     "remove_bad_rows" in this file (see below).


DAV17-RAW-NABEL-PRF-SSV-DAT-P2-5MIN-200001010000:
  # SSV: space-separated files
  # First file: Davos_P2_2000-05Min.dat
  # Last file:  Davos_P2_2005-05Min.dat
  filetype_valid_from: 2000-01-01 00:00:00
  filetype_valid_to: 2005-01-01 00:00:00
  filetype_id: Davos_P2_*-05Min.dat
  filetype_dateparser: Davos_P2_%Y-05Min.dat
  filetype_gzip: false
  filegroup: 12_meteo_forestfloor
  data_raw_freq: 5T
  data_skiprows: [ 0, 1 ]
#  data_skiprows: [ 0 ]
  data_headerrows: 0
#  data_headerrows: [ 0 ]
  data_index_col: 0
  data_parse_dates: [ 0 ]
  data_date_parser: '%Y%m%d%H%M'
  data_build_timestamp: false
  data_keep_good_rows: false
  # If "-999.9000-999.9000-999.9000-999.9000-999.9000" (str) is in the first column (index 0),
  # the data row is bad and removed
  data_remove_bad_rows: [ 0, "-999.9000-999.9000-999.9000-999.9000-999.9000"]
  data_na_values: [ -9999, nan, NaN, NAN, -6999, '-' ]
  data_encoding: utf-8
  data_delimiter: '\s+'
  data_mangle_dupe_cols: true
  data_keep_date_col: false
  data_version: raw
  data_vars:
    # First col also counts, but is ignored
    TIMESTAMP: this column is necessary but ignored!
    CO2ABS02: { field: CO2_PRF_T1_2_1, units: ppm, gain: 1, measurement: CO2 }
    CO2ABS10: { field: CO2_PRF_T1_10_1, units: ppm, gain: 1, measurement: CO2 }
    CO2ABS20: { field: CO2_PRF_T1_20_1, units: ppm, gain: 1, measurement: CO2 }
    CO2ABS25: { field: CO2_PRF_T1_25_1, units: ppm, gain: 1, measurement: CO2 }
    CO2ABS35: { field: CO2_PRF_T1_35_1, units: ppm, gain: 1, measurement: CO2 }
    TEMPMK3: { field: TEMPMK3_X_X_X, units: false, gain: 1, measurement: XXX }
    BATTV03: { field: BATTV03_X_X_X, units: V, gain: 1, measurement: XXX }
    TEMPCR10: { field: TEMPCR10_X_X_X, units: false, gain: 1, measurement: XXX }
